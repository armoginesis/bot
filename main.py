from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
import logging
import re
from telegram import BotCommand

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_FOR_NORM = 1
WAITING_FOR_DISTANCE_AND_VOZ = 2

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (–Ω–æ—Ä–º–∞ –≤–æ–∑–∞)
distance_coeffs = [
    (0.1, 0.2, 68),
    (0.21, 0.3, 61),
    (0.31, 0.4, 56),
    (0.41, 0.5, 53),
    (0.51, 0.6, 50),
    (0.61, 0.7, 47),
    (0.71, 0.8, 45),
    (0.81, 0.9, 43),
    (0.91, 1.0, 42),
    (1.1, 1.2, 40),
    (1.3, 1.4, 37),
    (1.5, 1.6, 35),
    (1.7, 1.8, 33),
    (1.9, 2.0, 32),
    (2.1, 2.3, 30),
    (2.4, 2.6, 28),
    (2.7, 2.9, 27),
    (3.0, 3.2, 26),
    (3.3, 3.5, 25),
    (3.6, 3.8, 24),
    (3.9, 4.2, 23),
    (4.3, 4.6, 21),
    (4.7, 5.0, 20),
    (5.1, 5.4, 19),
    (5.5, 5.8, 18),
    (5.9, 6.2, 17),
    (6.3, 6.6, 16),
    (6.7, 7.0, 15),
    (7.1, 7.8, 14),
    (7.8, 8.6, 13),
    (8.6, 9.0, 12),
    (9.1, 10.0, 11),
    (10.1, 11.0, 9),
    (11.01, 15.0, 8)
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ—Ä–º—ã –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def get_norm_for_distance(distance):
    for lower, upper, coeff in distance_coeffs:
        if lower <= distance <= upper:
            return coeff
    return 0  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def start_keyboard():
    return ReplyKeyboardMarkup(
        [['/reset', '/calculate']],
        one_time_keyboard=True, resize_keyboard=True
    )

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ



async def start(update: Update, context):
    await update.message.reply_text("–ù—É, –ø—Ä–∏–≤–µ—Ç. =)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω–∞ –ª–∏ –Ω–æ—Ä–º–æ–≤–∞—è –ø—É—Ç—ë–≤–∫–∞
    if 'norm' not in context.user_data:
        await update.message.reply_text('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ—Ä–º—ã, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ:',
                                        reply_markup=start_keyboard())
        return WAITING_FOR_NORM
    else:
        await update.message.reply_text('–¢—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ—Ä–º–æ–≤—É—é –ø—É—Ç—ë–≤–∫—É. –í–≤–µ–¥–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–æ–≤.',
                                        reply_markup=start_keyboard())
        return WAITING_FOR_DISTANCE_AND_VOZ

# –í–≤–æ–¥ –Ω–æ—Ä–º–æ–≤–æ–π –ø—É—Ç—ë–≤–∫–∏
async def set_norm(update: Update, context):
    user_input = update.message.text
    try:
        norm = float(user_input)
        context.user_data['norm'] = norm

        await update.message.reply_text(f'–ù–æ—Ä–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {int(norm)}. –í–≤–æ–¥–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª'
                                        f'\n–ü—Ä–∏–º–µ—Ä: 2.2 10'
                                        f'\n\n–£ —Ç–µ–±—è –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ? –î–æ–±–∞–≤—å —Å –Ω–æ–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞.',
                                        reply_markup=start_keyboard(), )
        return WAITING_FOR_DISTANCE_AND_VOZ
    except ValueError:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–æ—Ä–º–æ–≤–æ–π –ø—É—Ç—ë–≤–∫–∏.',
                                        reply_markup=start_keyboard())
        return WAITING_FOR_NORM


# –í–≤–æ–¥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤–æ–∑–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–≤–æ–¥–∞ –∞–±–∑–∞—Ü–µ–º)
async def handle_distance_and_voz(update: Update, context):
    user_input = update.message.text.strip()

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–∞)
    matches = re.findall(r'(\d+(\.\d+)?)\s+(\d+)', user_input)

    if not matches:
        await update.message.reply_text(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–∞. –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n2.2 10\n3.5 5',
            reply_markup=start_keyboard()
        )
        return WAITING_FOR_DISTANCE_AND_VOZ

    if 'distances' not in context.user_data:
        context.user_data['distances'] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–æ–∫
    for match in matches:
        distance = float(match[0])  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        voz = int(match[2])  # –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–æ–≤
        context.user_data['distances'].append((distance, voz))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –í–°–ï–ú–ò —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –≤–æ–∑–∞–º–∏
    all_records = "\n".join([f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {d}, –í–æ–∑–∞: {v}' for d, v in context.user_data['distances']])

    await update.message.reply_text(
        f'–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤–æ–∑–æ–≤:\n{all_records}\n\n'
        f'–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ /calculate –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.',
        reply_markup=start_keyboard()
    )
    return WAITING_FOR_DISTANCE_AND_VOZ

# –†–∞—Å—á—ë—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def calculate(update: Update, context):
    total_salary = 0
    norm = context.user_data.get('norm', 0)
    distances = context.user_data.get('distances', [])

    for distance, voz in distances:
        norm_for_distance = get_norm_for_distance(distance)
        if norm_for_distance != 0:
            earned_money = (norm / norm_for_distance) * voz
            total_salary += earned_money

    # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    total_salary = round(total_salary)  # –∏–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å int(total_salary)

    await update.message.reply_text(
        f'–¢–≤–æ—è –æ–±—â–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞:  {total_salary} —Ä—É–±–ª–µ–π  –∑–∞ —Å–º–µ–Ω—É. \n'
        '–°—á–µ—Ç—á–∏–∫ –æ–±–Ω—É–ª–µ–Ω, –º–æ–∂–µ—à—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
        reply_markup=start_keyboard()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
    context.user_data['distances'] = []

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤–æ–∑–æ–≤
    return WAITING_FOR_DISTANCE_AND_VOZ

# –°–±—Ä–æ—Å –Ω–æ—Ä–º–æ–≤–æ–π –ø—É—Ç—ë–≤–∫–∏
async def reset_norm(update: Update, context):
    if 'norm' in context.user_data:
        del context.user_data['norm']
        await update.message.reply_text('–ù–æ—Ä–º–æ–≤–∞—è –ø—É—Ç—ë–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –Ω–æ—Ä–º–æ–≤—É—é –ø—É—Ç—ë–≤–∫—É.',
                                        reply_markup=start_keyboard())
        return WAITING_FOR_NORM
    else:
        await update.message.reply_text('–ù–æ—Ä–º–æ–≤–∞—è –ø—É—Ç—ë–≤–∫–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏ —Å–≤–æ—é –Ω–æ—Ä–º—É:',
                                        reply_markup=start_keyboard())
        return WAITING_FOR_NORM

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("7773666339:AAFLJym_g7H13VqEq7g3wCaV8j7co9pWfh4").build()

    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WAITING_FOR_NORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_norm)],
            WAITING_FOR_DISTANCE_AND_VOZ: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_distance_and_voz),
                CommandHandler('calculate', calculate)
            ],
        },
        fallbacks=[CommandHandler('reset', reset_norm)],
    )


    application.add_handler(conversation_handler)

    async def set_bot_commands(application):
        commands = [
            BotCommand("reset", "üîÑ –°–±—Ä–æ—Å –Ω–æ—Ä–º–æ–≤–æ–π –ø—É—Ç—ë–≤–∫–∏"),
            BotCommand("calculate", "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É")
        ]
        await application.bot.set_my_commands(commands)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        application.job_queue.run_once(lambda _: application.create_task(set_bot_commands(application)), when=1)

    application.run_polling()

if __name__ == '__main__':
    main()
